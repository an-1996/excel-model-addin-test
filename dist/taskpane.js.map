{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office, OfficeExtension */\n\n/**\n * Initializes the add-in. Attaches event handlers.\n */\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Assign function to button click\n    document.getElementById(\"calculateGpmButton\").onclick = runGpmCalculation;\n\n    // Clear status on load\n    updateStatus(\"\");\n  }\n});\n\n/**\n * Handles the button click event to calculate Gross Profit Margin.\n */\nasync function runGpmCalculation() {\n  try {\n    // Get the period input value from the text box\n    const periodInput = document.getElementById(\"periodInput\").value;\n    if (!periodInput || periodInput.trim() === \"\") {\n       updateStatus(\"Error: Please enter a period.\", true);\n       return;\n    }\n    const trimmedPeriod = periodInput.trim();\n\n    updateStatus(`Calculating GPM for period ${trimmedPeriod}...`);\n\n    // Run the Excel calculation logic\n    await Excel.run(async (context) => {\n      // --- 1. Get Data ---\n      // Get the specific worksheet named \"DataSheet\"\n      const sheet = context.workbook.worksheets.getItem(\"DataSheet\");\n      // Get the specific table named \"InputData\" within that sheet\n      const table = sheet.tables.getItem(\"InputData\");\n\n      // Load the values from the data body range of the table\n      const dataRange = table.getDataBodyRange();\n      dataRange.load(\"values\");\n\n      // Synchronize with Excel to fetch the loaded values\n      await context.sync();\n\n      // --- 2. Process Data ---\n      // Store the retrieved values in a variable\n      const tableValues = dataRange.values;\n      // Initialize variables to hold aggregated values\n      let revenue = 0;\n      let cogs = 0;\n      let foundRevenue = false;\n      let foundCogs = false;\n\n      // Loop through each row in the retrieved table data\n      // Assuming columns: Account (index 0), Period (index 1), Amount (index 2)\n      for (let i = 0; i < tableValues.length; i++) {\n        const row = tableValues[i];\n        // Extract data, trim strings, and handle potential nulls/undefined\n        const currentPeriod = row[1] ? String(row[1]).trim() : \"\"; // Period in column 1\n        const currentAccount = row[0] ? String(row[0]).trim().toLowerCase() : \"\"; // Account in column 0\n        // Ensure amount is treated as a number, default to 0 if not numeric\n        const currentAmount = typeof row[2] === 'number' ? row[2] : 0; // Amount in column 2\n\n        // Check if the current row's period matches the user's input period\n        if (currentPeriod === trimmedPeriod) {\n          // Check the account type and aggregate the amount accordingly\n          switch (currentAccount) {\n            case \"revenue\":\n              revenue += currentAmount;\n              foundRevenue = true; // Mark that revenue data was found\n              break;\n            case \"cogs\":\n              cogs += currentAmount;\n              foundCogs = true; // Mark that COGS data was found\n              break;\n          }\n        }\n      }\n\n      // --- 3. Validate and Calculate ---\n      // Check if essential data points were found for the calculation\n      if (!foundRevenue) {\n        updateStatus(`Error: No 'Revenue' found for period ${trimmedPeriod}.`, true);\n        return; // Stop execution if revenue is missing\n      }\n      if (!foundCogs) {\n        updateStatus(`Error: No 'COGS' found for period ${trimmedPeriod}.`, true);\n        return; // Stop execution if COGS is missing\n      }\n      // Check for non-positive revenue to prevent division by zero or meaningless margin\n      if (revenue <= 0) {\n         updateStatus(`Error: Revenue (${revenue}) is zero or negative for period ${trimmedPeriod}. Cannot calculate margin.`, true);\n         return; // Stop execution if revenue is not positive\n      }\n\n      // Perform the Gross Profit and Margin calculations\n      const grossProfit = revenue - cogs;\n      const grossProfitMargin = grossProfit / revenue;\n\n      // --- 4. Prepare and Write Output ---\n      // Define the name for the new output worksheet\n      const outputSheetName = `GPM_${trimmedPeriod}`;\n\n      // Check if an output sheet with the same name already exists\n      const existingSheet = context.workbook.worksheets.getItemOrNullObject(outputSheetName);\n      // Load a property (like 'name') to check its existence after the sync\n      existingSheet.load(\"name\");\n      await context.sync(); // Sync to check if the sheet exists\n\n      // If the sheet exists (is not a null object), delete it\n      if (!existingSheet.isNullObject) {\n          console.log(`Deleting existing sheet: ${outputSheetName}`);\n          existingSheet.delete();\n          // Sync again immediately to ensure deletion completes before adding the new sheet\n          await context.sync();\n      }\n\n      // Add the new output sheet\n      const outputSheet = context.workbook.worksheets.add(outputSheetName);\n\n      // Prepare the data array to be written to the output sheet.\n      // **Ensure this array matches the dimensions of the target range (A1:B7 -> 7 rows, 2 columns)**\n      const outputData = [\n        [\"Period:\", trimmedPeriod],         // Row 1\n        [null, null],                     // Row 2 (blank)\n        [\"Metric\", \"Value\"],              // Row 3\n        [\"Revenue\", revenue],             // Row 4\n        [\"COGS\", cogs],                   // Row 5\n        [\"Gross Profit\", grossProfit],     // Row 6\n        [\"Gross Profit Margin\", grossProfitMargin] // Row 7\n      ];\n\n      // Get the target range on the output sheet\n      const outputRange = outputSheet.getRange(\"A1:B7\");\n      // Write the prepared data array to the range\n      outputRange.values = outputData;\n\n      // Apply formatting to the output range\n      outputSheet.getRange(\"B4:B6\").numberFormat = \"$#,##0.00\"; // Currency format\n      outputSheet.getRange(\"B7\").numberFormat = \"0.00%\"; // Percentage format\n      \n      // Apply bold formatting to header rows separately\n      outputSheet.getRange(\"A1:B1\").format.font.bold = true; \n      outputSheet.getRange(\"A3:B3\").format.font.bold = true; \n\n      // Autofit columns A and B for better readability using the outputRange object\n      outputRange.format.autofitColumns(); \n\n      // Make the newly created output sheet the active sheet\n      outputSheet.activate();\n\n      // Sync all queued changes (add sheet, write data, format, activate) to Excel\n      await context.sync();\n\n      // Update the status message in the task pane to indicate completion\n      updateStatus(`Calculation complete. Results on sheet '${outputSheetName}'.`);\n\n    }); // End of Excel.run\n  } catch (error) {\n    // Catch any errors that occur during the process\n    console.error(\"Error: \" + error); // Log the full error to the console\n    // Check if it's an OfficeExtension specific error for more details\n    if (error instanceof OfficeExtension.Error) {\n      console.error(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      // Display a user-friendly error message in the task pane\n      updateStatus(`Error: ${error.message} (Debug: ${error.debugInfo.errorLocation || 'N/A'})`, true);\n    } else {\n      // Display a generic error message for other types of errors\n       updateStatus(`Error: ${error.message}`, true);\n    }\n  }\n}\n\n/**\n * Helper function to update the status message in the task pane.\n * @param message The message to display.\n * @param isError Optional. If true, applies error styling.\n */\nfunction updateStatus(message, isError = false) {\n   const statusElement = document.getElementById(\"status\");\n   // Set the text content of the status element\n   statusElement.innerText = message;\n   // Apply red color for errors, default color otherwise\n   statusElement.style.color = isError ? \"red\" : \"#555\";\n}\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"/> <title>Financial Modeler Task Pane</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> <style>body{display:flex;flex-direction:column;align-items:center;padding:20px}.input-group{margin-bottom:15px;width:100%;max-width:300px}.input-group label{display:block;margin-bottom:5px;font-weight:700}.input-group input{width:100%;padding:8px;box-sizing:border-box;border:1px solid #ccc}.status{margin-top:15px;font-style:italic;color:#555;min-height:20px;width:100%;max-width:300px;text-align:center}button{padding:10px 20px;cursor:pointer}</style> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <h2 class=\\\"ms-font-xl\\\">Gross Profit Margin Calculator</h2> <div class=\\\"input-group\\\"> <label for=\\\"periodInput\\\">Enter Period (e.g., 2025-04):</label> <input type=\\\"text\\\" id=\\\"periodInput\\\" placeholder=\\\"YYYY-MM\\\"/> </div> <button class=\\\"ms-Button\\\" id=\\\"calculateGpmButton\\\">Calculate GPM</button> <div id=\\\"status\\\" class=\\\"status\\\"></div> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"><\" + \"/script> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","runGpmCalculation","_runGpmCalculation","_callee2","periodInput","trimmedPeriod","_context2","getElementById","trim","updateStatus","concat","Excel","run","_ref","_callee","context","sheet","table","dataRange","tableValues","revenue","cogs","foundRevenue","foundCogs","row","currentPeriod","currentAccount","currentAmount","grossProfit","grossProfitMargin","outputSheetName","existingSheet","outputSheet","outputData","outputRange","_context","workbook","worksheets","getItem","tables","getDataBodyRange","load","sync","String","toLowerCase","t0","getItemOrNullObject","isNullObject","console","log","delete","add","getRange","numberFormat","format","font","bold","autofitColumns","activate","_x","error","OfficeExtension","JSON","stringify","debugInfo","message","errorLocation","isError","statusElement","innerText","style","color","Office","onReady","info","host","HostType","onclick","URL"],"sourceRoot":""}